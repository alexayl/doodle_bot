# Cross-platform shell configuration
# Windows uses PowerShell by default; Unix recipes use shebang to override when needed
set shell := ["powershell.exe", "-NoLogo", "-NoProfile", "-Command"]

# ------------------
#  Configurables
# ------------------
SIM_BOARD        := "qemu_x86"

ESP_BOARD        := "esp32s3_devkitc/esp32s3/procpu"
ESP_PORT         := if os() == "windows" { "COM4" } else { "/dev/ttyUSB0" }          # Silicon Labs CP210x for ESP32

NRF_BOARD       := "nrf52840dk/nrf52840"
NRF_PORT        := if os() == "windows" { "COM4" } else { "/dev/ttyACM0" }

CMAKE_CACHE_ARGS := "-- -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

# ------------------
#  Helpers
# ------------------

# Cross-platform workspace verification
_verify_workspace:
  @just _verify-{{os()}}

_verify-windows:
  @if (!(Test-Path ".west")) { Write-Host "ERROR: .west not found here. Ensure in firmware/ and README installation instructions have been followed." -ForegroundColor Red; exit 1 }

_verify-linux:
  #!/bin/bash
  test -d .west || (echo "ERROR: .west not found here. Ensure in firmware/ and README installation instructions have been followed." && exit 1)

_verify-macos:
  #!/bin/bash
  test -d .west || (echo "ERROR: .west not found here. Ensure in firmware/ and README installation instructions have been followed." && exit 1)

# ------------------
#  Sim (QEMU)
# ------------------

build-sim: _verify_workspace clean
  west build \
    -p always \
    -b {{SIM_BOARD}} \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}}

run-sim: build-sim
  west build -t run -d build

# ------------------
#  ESP32-S3
# ------------------

build-esp32: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}}

flash-esp32:
  west flash --build-dir build

monitor-esp32:
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200

run-esp32: build-esp32 flash-esp32 monitor-esp32


# ------------------------------------
#  Nordic nRF52840 Development Kit
# ------------------------------------

build-nrf: _verify_workspace clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}}


build-blinky:
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    zephyr/samples/basic/blinky_pwm \
    {{CMAKE_CACHE_ARGS}} \
    -DEXTRA_DTC_OVERLAY_FILE="{{justfile_directory()}}/zephyr/samples/basic/blinky_pwm/boards/nrf52840dk_nrf52840.overlay"


# TODO: add overlay file for nRF52840

flash-nrf:
  west flash --build-dir build

monitor-nrf:
  python -m serial.tools.miniterm "{{NRF_PORT}}" 115200


run-nrf: build-nrf flash-nrf monitor-nrf

# ------------------
# Tests - Cross Platform
# ------------------
test: clean
  west build -b native_sim tests/state_machine
  west build -t run

# ------------------
# Tests - NRF52840
# ------------------
test-nrf-servo: _verify_workspace clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_SERVO_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{NRF_PORT}}" 115200

test-nrf-led: _verify_workspace clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_LED_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{NRF_PORT}}" 115200

test-nrf-buzzer: _verify_workspace clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_BUZZER_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{NRF_PORT}}" 115200

test-nrf-stepper: _verify_workspace clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_STEPPER_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{NRF_PORT}}" 115200

# ------------------
# Tests - ESP32-S3
# ------------------
test-esp-servo: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_SERVO_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200

test-esp-led: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_LED_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200

test-esp-buzzer: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_BUZZER_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200

test-esp-pwm-buzzer: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_PWM_BUZZER_DRIVER_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200

test-esp-stepper: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}} \
    -DCONFIG_STEPPER_TEST=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200


# ------------------
#  Defaults
# ------------------

# Cross-platform clean command
clean:
  @just clean-{{os()}}

clean-windows:
  if (Test-Path "build") { Remove-Item -Recurse -Force "build" }

clean-linux:
  #!/bin/bash
  rm -rf build

clean-macos:
  #!/bin/bash
  rm -rf build
