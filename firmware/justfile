# Cross-platform shell configuration
# On Windows, use PowerShell for recipes that need it
set windows-shell := ["powershell.exe", "-NoLogo", "-Command"]

# ------------------
#  Configurables
# ------------------
SIM_BOARD        := "qemu_x86"

ESP_BOARD        := "esp32s3_devkitc/esp32s3/procpu"
ESP_PORT         := if os() == "windows" { "COM4" } else { "/dev/ttyUSB0" }          # Silicon Labs CP210x for ESP32

NRF_BOARD       := "nrf52840dk/nrf52840"
NRF_PORT        := if os() == "windows" { "COM4" } else { "/dev/ttyACM0" }

CMAKE_CACHE_ARGS := "-- -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

# ------------------
#  Helpers
# ------------------

# Cross-platform workspace verification
_verify_workspace:
  @just _verify-{{os()}}

_verify-windows:
  @if (!(Test-Path ".west")) { Write-Host "ERROR: .west not found here. Ensure in firmware/ and README installation instructions have been followed." -ForegroundColor Red; exit 1 }

_verify-linux:
  #!/bin/bash
  test -d .west || (echo "ERROR: .west not found here. Ensure in firmware/ and README installation instructions have been followed." && exit 1)

_verify-macos:
  #!/bin/bash
  test -d .west || (echo "ERROR: .west not found here. Ensure in firmware/ and README installation instructions have been followed." && exit 1)

# ------------------
#  Sim (QEMU)
# ------------------

build-sim: _verify_workspace clean
  west build \
    -p always \
    -b {{SIM_BOARD}} \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}}

run-sim: build-sim
  west build -t run -d build

# ------------------
#  ESP32-S3
# ------------------

build-esp32: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}}

flash-esp32:
  west flash --build-dir build

monitor-esp32:
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200

run-esp32: build-esp32 flash-esp32 monitor-esp32


# ------------------------------------
#  Nordic nRF52840 Development Kit
# ------------------------------------

build-nrf: _verify_workspace clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    app \
    {{CMAKE_CACHE_ARGS}}


build-blinky:
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    zephyr/samples/basic/blinky_pwm \
    {{CMAKE_CACHE_ARGS}} \
    -DEXTRA_DTC_OVERLAY_FILE="{{justfile_directory()}}/zephyr/samples/basic/blinky_pwm/boards/nrf52840dk_nrf52840.overlay"

build-ble: clean
  west build \
    -p always \
    -b "{{NRF_BOARD}}" \
    -d build \
    zephyr/samples/bluetooth/peripheral_nus \
    {{CMAKE_CACHE_ARGS}} 

run-ble: build-ble flash-nrf monitor-nrf


# TODO: add overlay file for nRF52840

flash-nrf:
  west flash --build-dir build

monitor-nrf:
  python -m serial.tools.miniterm "{{NRF_PORT}}" 115200


run-nrf: build-nrf flash-nrf monitor-nrf

# ------------------
# Tests - Application
# ------------------
test-state_machine: clean
  west build -b native_sim tests/state_machine
  west build -t run

test-instruction_parser: clean
  west build -b native_sim tests/instruction_parser
  west build -t run

test-navigation: clean
  west build -b native_sim tests/navigation
  west build -t run

test-app-all: test-state_machine test-instruction_parser


# Generic test recipe that works for both platforms
_test_driver platform driver_name config_name: _verify_workspace clean
  west build \
    -p always \
    -b "{{ if platform == "esp" { ESP_BOARD } else { NRF_BOARD } }}" \
    -d build \
    tests/{{driver_name}} \
    {{CMAKE_CACHE_ARGS}} \
    -D{{config_name}}=y
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ if platform == "esp" { ESP_PORT } else { NRF_PORT } }}" 115200

# NRF52840 test aliases
test-nrf-servo: (_test_driver "nrf" "servo" "CONFIG_SERVO_TEST")
test-nrf-led: (_test_driver "nrf" "led" "CONFIG_LED_TEST")
test-nrf-stepper: (_test_driver "nrf" "stepper" "CONFIG_STEPPER_TEST")

# ESP32-S3 test aliases
test-esp-servo: (_test_driver "esp" "servo" "CONFIG_SERVO_TEST")
test-esp-led: (_test_driver "esp" "led" "CONFIG_LED_TEST")
test-esp-pwm-buzzer: (_test_driver "esp" "pwm-buzzer" "CONFIG_PWM_BUZZER_DRIVER_TEST")
test-esp-stepper: (_test_driver "esp" "stepper" "CONFIG_STEPPER_TEST")
test-esp-dfplayer: (_test_driver "esp" "dfplayer" "CONFIG_DFPLAYER_TEST")

# Run comprehensive peripheral demo showing all components
demo-esp: _verify_workspace clean
  west build \
    -p always \
    -b "{{ESP_BOARD}}" \
    -d build \
    tests/demo \
    {{CMAKE_CACHE_ARGS}}
  west flash --build-dir build
  python -m serial.tools.miniterm "{{ESP_PORT}}" 115200


# ------------------
#  Defaults
# ------------------

# Cross-platform clean command
clean:
  @just clean-{{os()}}

clean-windows:
  if (Test-Path "build") { Remove-Item -Recurse -Force "build" }

clean-linux:
  #!/bin/bash
  rm -rf build

clean-macos:
  #!/bin/bash
  rm -rf build
